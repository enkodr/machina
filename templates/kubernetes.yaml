# The kind Cluster allows the creation of a cluster of Machines
kind: Cluster 

# The name for the cluster. This needs to be unique in the system.
name: kubernetes

# Params allows you to set parametes to be used in the scripts.
# These parameters will be available for all the machines within the workspace.
params:
  k8sVersion: "1.27.2"
  network: "10.0.0.0/16"

# The results allows you to define the results from the cluster.
# These results will be available for all the machines within the workspace.
results:
- joinCommand

# The machines uses a list of kind Machine 
machines:
- kind: Machine
  name: control-plane
  
  extends: ubuntu
  # Number of machines to create
  replicas: 1

  image: 
    url: "https://cloud-images.ubuntu.com/focal/current/focal-server-cloudimg-amd64.img"
    checksum: "sha256:10185867eeab7ef4713276f084fc0c2e89c52335727e8ca039deac5b47f96605"

  scripts:
    install: |
      #!/bin/bash

      K8S_VERSION="{{ .Params.k8sVersion }}"

      # Configure containerd
      cat <<EOF | sudo tee /etc/modules-load.d/containerd.conf
      overlay
      br_netfilter
      EOF

      sudo modprobe overlay
      sudo modprobe br_netfilter

      # Configure kubernetes
      cat << EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
      net.bridge.bridge-nf-call-iptables  = 1
      net.ipv4.ip_forward                 = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      EOF

      # Install dependencies
      sudo sysctl --system
      sudo apt-get update && sudo apt-get install -y containerd
      sudo mkdir -p /etc/containerd
      sudo containerd config default | sudo tee /etc/containerd/config.toml
      sudo systemctl restart containerd
      sudo swapoff -a
      sudo apt-get install -y apt-transport-https curl
      curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

      # Install kubernetes
      cat << EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
      deb https://apt.kubernetes.io/ kubernetes-xenial main
      EOF

      sudo apt-get update
      sudo apt-get install -y kubelet=${K8S_VERSION}-00 kubeadm=${K8S_VERSION}-00 kubectl=${K8S_VERSION}-00
      sudo apt-mark hold kubelet kubeadm kubectl

      sudo kubeadm init --pod-network-cidr {{ .Params.network }} --kubernetes-version ${K8S_VERSION}
      mkdir -p $HOME/.kube
      sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
      sudo chown $(id -u):$(id -g) $HOME/.kube/config
      kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.0/manifests/calico.yaml

      kubeadm token create --print-join-command > $(results.joinCommand)


- kind: Machine
  name: worker-node
  extends: ubuntu
  replicas: 2

  image: 
    url: "https://cloud-images.ubuntu.com/focal/current/focal-server-cloudimg-amd64.img"
    checksum: "sha256:10185867eeab7ef4713276f084fc0c2e89c52335727e8ca039deac5b47f96605"

  scripts:
    install: |
      #!/bin/bash
  
      K8S_VERSION="{{ .Params.k8sVersion }}"
  
      # Configure containerd
      cat <<EOF | sudo tee /etc/modules-load.d/containerd.conf
      overlay
      br_netfilter
      EOF
  
      sudo modprobe overlay
      sudo modprobe br_netfilter
  
      # Configure kubernetes
      cat << EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
      net.bridge.bridge-nf-call-iptables  = 1
      net.ipv4.ip_forward                 = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      EOF
  
      # Install dependencies
      sudo sysctl --system
      sudo apt-get update && sudo apt-get install -y containerd
      sudo mkdir -p /etc/containerd
      sudo containerd config default | sudo tee /etc/containerd/config.toml
      sudo systemctl restart containerd
      sudo swapoff -a
      sudo apt-get install -y apt-transport-https curl
      curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
  
      # Install kubernetes
      cat << EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
      deb https://apt.kubernetes.io/ kubernetes-xenial main
      EOF
      
      sudo apt-get update
      sudo apt-get install -y kubelet=${K8S_VERSION}-00 kubeadm=${K8S_VERSION}-00 kubectl=${K8S_VERSION}-00
      sudo apt-mark hold kubelet kubeadm kubectl

      sudo sh -c $(results.joinCommand)
  